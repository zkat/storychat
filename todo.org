* archive [12/12]
** DONE Set up stylus for per-control styles             :style:architecture:
   CLOSED: [2013-08-25 Sun 20:23]
** DONE render chatlog and write chatlog model/list                    :chat:
   CLOSED: [2013-08-25 Sun 21:30]
   It should take care of the websocket, itself.
** DONE Move controls and models into their own directories    :architecture:
   CLOSED: [2013-08-25 Sun 21:49]
** DONE Ask around to see what people do wrt having to ../     :architecture:
   CLOSED: [2013-08-25 Sun 21:54]
   It's a bit ridiculous. Is this how node stuff usually works?...
** DONE Move node source code into src/server                  :architecture:
   CLOSED: [2013-08-25 Sun 22:12]
   Better separation this way. It's kinda awkward for the server-side code
   to live in a directory above the client code. Having src/client/js is
   ok, since it gives freedom to treat src/client as a source mirror of
   the browser-side structure.
** DONE Reconnect on disconnect, or something                          :chat:
   CLOSED: [2013-08-29 Thu 23:10]
** DONE Generic wrapper for can.Control                               :proto:
   CLOSED: [2013-08-30 Fri 00:44]
** DONE Notify the user of a disconnection somehow                     :chat:
   CLOSED: [2013-08-31 Sat 00:30]
** DONE Move websocket configuration to external param                 :chat:
   CLOSED: [2013-08-31 Sat 00:31]
   Might actually need to make a clientState thing for generic client
   settings.
   Good enough to move it out to storychat.js and pass it in.
** DONE Shared websocket connection                                    :chat:
   CLOSED: [2013-08-31 Sat 01:34]
   Ideally, there would be one websocket connection for each "thing", but
   fallback protocols mean that we can only have one WS connection open at
   any given time -- as such, the handling should be moved to a single,
   shared WS connection that is then passed around to any interested
   modules, who will receive namespaced APIs for listening/writing.
** DONE Write a transform that will include and render css            :build:
   CLOSED: [2013-08-31 Sat 12:19]
   Should be able to just require("./chatInput.styl") or
   requireCss("./chatInput.styl") and have it do the right thing. The
   question is -- should it only insert the CSS after being called the
   first time, or should control modules simply add the CSS themselves?
** DONE Write a transform for including .mustache files as can.views  :build:
   CLOSED: [2013-08-31 Sat 12:18]
* backlog [0/0]
* active [0/5]
** TODO Split chatbox into two components                              :chat:
   One for input, which will be increasingly complex, and one for
   rendering the actual chat entries (and interactivity with entries in
   it).
** TODO Reconnect logic for socketConn                             :sockConn:
   Bring back the reconnection logic, but think a bit about what it means
   to reconnect and handle connected/disconnected events when there's only
   a single shared connection.
** TODO Smarter disconnect handling                                :sockConn:
   Right now, it just keeps trying to reconnect over and over, as fast as
   possible. Instead, make the reconnect frequency lower and limit the n
   number of reconnect attempts before asking the user to refresh.
** TODO Generic wrapper for can.Model                                 :proto:
** TODO Set up a basic test with funcunit                   :qa:architecture:
   Just something that tests that connections are established properly and
   the like.
