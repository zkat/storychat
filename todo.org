* archive [82/82]
** DONE Set up stylus for per-control styles             :style:architecture:
   CLOSED: [2013-08-25 Sun 20:23]
** DONE render chatlog and write chatlog model/list                    :chat:
   CLOSED: [2013-08-25 Sun 21:30]
   It should take care of the websocket, itself.
** DONE Move controls and models into their own directories    :architecture:
   CLOSED: [2013-08-25 Sun 21:49]
** DONE Ask around to see what people do wrt having to ../     :architecture:
   CLOSED: [2013-08-25 Sun 21:54]
   It's a bit ridiculous. Is this how node stuff usually works?...
** DONE Move node source code into src/server                  :architecture:
   CLOSED: [2013-08-25 Sun 22:12]
   Better separation this way. It's kinda awkward for the server-side code
   to live in a directory above the client code. Having src/client/js is
   ok, since it gives freedom to treat src/client as a source mirror of
   the browser-side structure.
** DONE Reconnect on disconnect, or something                          :chat:
   CLOSED: [2013-08-29 Thu 23:10]
** DONE Generic wrapper for can.Control                               :proto:
   CLOSED: [2013-08-30 Fri 00:44]
** DONE Notify the user of a disconnection somehow                     :chat:
   CLOSED: [2013-08-31 Sat 00:30]
** DONE Move websocket configuration to external param                 :chat:
   CLOSED: [2013-08-31 Sat 00:31]
   Might actually need to make a clientState thing for generic client
   settings.
   Good enough to move it out to storychat.js and pass it in.
** DONE Shared websocket connection                                    :chat:
   CLOSED: [2013-08-31 Sat 01:34]
   Ideally, there would be one websocket connection for each "thing", but
   fallback protocols mean that we can only have one WS connection open at
   any given time -- as such, the handling should be moved to a single,
   shared WS connection that is then passed around to any interested
   modules, who will receive namespaced APIs for listening/writing.
** DONE Write a transform that will include and render css            :build:
   CLOSED: [2013-08-31 Sat 12:19]
   Should be able to just require("./chatInput.styl") or
   requireCss("./chatInput.styl") and have it do the right thing. The
   question is -- should it only insert the CSS after being called the
   first time, or should control modules simply add the CSS themselves?
** DONE Write a transform for including .mustache files as can.views  :build:
   CLOSED: [2013-08-31 Sat 12:18]
** DONE Toggle between different input types in input field            :chat:
   CLOSED: [2013-09-08 Sun 15:52]
   Pressing TAB while focused on the input field should toggle between the
   different types of input.
** DONE Build all of \/static based on src\/client                    :build:
   CLOSED: [2013-09-08 Sun 16:41]
   Put everything, including regular frontend files, inside src/client/,
   and have the makefile build off there. See if watchify can be
   configured to rebuild when files in an arbitrary directory change.
** DONE Split chatbox into two components                              :chat:
   CLOSED: [2013-09-08 Sun 17:04]
   One for input, which will be increasingly complex, and one for
   rendering the actual chat entries (and interactivity with entries in
   it).
** DONE inputType dropdown                                             :chat:
   CLOSED: [2013-09-08 Sun 19:53]
   Allow a dropdown to change the inputType, not just pressing the TAB key
** DONE Add character name to chat                                     :chat:
   CLOSED: [2013-09-09 Mon 01:06]
** DONE Add dialogue                                                   :chat:
   CLOSED: [2013-09-09 Mon 02:07]
** DONE Don't lose input when you switch input types                   :chat:
   CLOSED: [2013-09-09 Mon 02:24]
   If you press tab, everything gets rerendered and the input completely
   disappears.
   The best fix for this is most likely to change how inputs
   work so that each of them is its own control, and is attached/detached
   as the types cycle through -- that way, they can maintain their state
   during tabbing.
** DONE Add actions                                                    :chat:
   CLOSED: [2013-09-09 Mon 02:36]
** DONE Get rid of system input                                        :chat:
   CLOSED: [2013-09-09 Mon 02:36]
   Because it's not supposed to be there anyway.
** DONE Get rid of 'line' input                                        :chat:
   CLOSED: [2013-09-09 Mon 02:36]
** DONE Make port configurable                                      :backend:
   CLOSED: [2013-09-09 Mon 09:04]
** DONE Log startup                                                 :backend:
   CLOSED: [2013-09-09 Mon 09:04]
   Log a message saying the server is listening and what port it's
   listening on.
** DONE Instrument messages to check timing                            :chat:
   CLOSED: [2013-09-09 Mon 09:24]
   Have a start and end timestamp right in the message which chatlog
   handles. Later on, we can use this to test latency from the server.
** DONE Add slug lines                                                 :chat:
   CLOSED: [2013-09-09 Mon 19:51]
** DONE Add scene heading                                              :chat:
   CLOSED: [2013-09-09 Mon 19:51]
** DONE Add OOC                                                        :chat:
   CLOSED: [2013-09-09 Mon 19:51]
** DONE MessageGroups                                                  :chat:
   CLOSED: [2013-09-11 Wed 00:37]
   Instead of having each item in the Chatlog be an individual message,
   have the chatlog consist of groups of messages of the same type/source
   -- so if the same source sends a message multiple times in a row, it'll
   get appended to the group. The views can then render these messages as
   multiple dom nodes, but close together so that they seem like they're
   part of a single, big message.
   Do this before styling.
** DONE Add parentheticals                                             :chat:
   CLOSED: [2013-09-11 Wed 01:11]
   This is just an extension to the dialogue input.
** DONE Style chatOutput                                         :chat:style:
   CLOSED: [2013-09-11 Wed 23:51]
** DONE Get rid of inputs that won't be used                           :chat:
   CLOSED: [2013-09-12 Thu 00:14]
   Not all the inputs listed will actually be used -- get rid of the
   irrelevant ones before doing any more work.
** DONE Basic port of smug to JS                                     :parser:
   CLOSED: [2013-09-13 Fri 00:37]
** DONE Have server send back parentheticals                    :chat:parser:
   CLOSED: [2013-09-13 Fri 01:19]
   dialogue content will be delivered as-is, and parentheticals should be
   extracted from that and sent back.
** DONE Fix parenthetical rendering                                    :chat:
   CLOSED: [2013-09-13 Fri 01:22]
** DONE Style parentheticals                                           :chat:
   CLOSED: [2013-09-13 Fri 02:04]
** DONE Move parser stuff outside of index.js                        :parser:
   CLOSED: [2013-09-13 Fri 23:21]
** DONE Write unit tests for chat parser                             :parser:
   CLOSED: [2013-09-14 Sat 15:18]
** DONE Don't crash on bad client input                              :server:
   CLOSED: [2013-09-14 Sat 15:29]
   If a malformed message is received from a client, log an error and throw
   the message away instead of crashing. This means use a catchall.
** DONE Keep tests together with source                          :organizing:
   CLOSED: [2013-09-14 Sat 15:40]
   Keep tests in the same directory as their source code and have the test
   runner find them from there.
** DONE Start structuring node code                                  :server:
   CLOSED: [2013-09-15 Sun 15:22]
   Right now, the whole damn thing is shoved into a single index.js
   file. Organize it into multiple modules. Note that we're going to use
   websockets to communicate with the client instead of AJAX!
** DONE Set up sequelize                                                 :db:
   CLOSED: [2013-09-15 Sun 21:40]
   Play with it, set up a sample migration, see how it feels. Do it in a
   branch so it's easy to throw that garbage away when it turns out it
   sucks.
** DONE Move config files to config/                                  :build:
   CLOSED: [2013-09-15 Sun 22:35]
** DONE Create a password hashing salt external to the db            :server:
   CLOSED: [2013-09-16 Mon 08:08]
   Like the sessionSecret token, create an additional salt that will be
   stored in an external config file that the system can use to improve
   the hashing for passwords.
** DONE Use node-bcrypt                                              :server:
   CLOSED: [2013-09-16 Mon 09:21]
   Instead of postgres' crypto. Things might end up in db logs this way.
** DONE Basic user API                                         :users:server:
   CLOSED: [2013-09-16 Mon 22:07]
   API for creating users and check their login credentials.
** DONE Pull in node-fibers and experiment                           :server:
   CLOSED: [2013-09-18 Wed 01:09]
** DONE Convert user tests to task module                             :tests:
   CLOSED: [2013-09-18 Wed 01:31]
** DONE Directory vars                                                 :meta:
   CLOSED: [2013-09-19 Thu 22:44]
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html
** DONE Switch to Q for promises                                     :server:
   CLOSED: [2013-09-19 Thu 22:54]
   https://github.com/kriskowal/q
** DONE Move sessionSecret to an external config                     :server:
   CLOSED: [2013-09-19 Thu 23:18]
** DONE rename passwordSalt to passwordSecret                       :infosec:
   CLOSED: [2013-09-19 Thu 23:22]
** DONE Extract mona into a separate project                           :mona:
   CLOSED: [2013-10-02 Wed 22:48]
   Mona lives in a separate project now, but storychat now has to pull it in as
   a dependency. :)
** DONE Move server utils into a util/ dir                            :utils:
   CLOSED: [2013-10-02 Wed 22:58]
   There's a number of different utils in the project that are just kinda
   sitting around and could potentially turn into external projects. Move them
   to a util/ folder to clean up the src/server root.
** DONE Reorganize server files                                    :refactor:
   CLOSED: [2013-10-02 Wed 23:19]
** DONE socketServer multiplexing                                    :server:
   CLOSED: [2013-10-03 Thu 00:09]
   Set up a feathers-style multiplexing system for installing services into
   socketServer that will handle different kinds of messages.
** DONE Basic pages setup with can.route                       :pages:server:
   CLOSED: [2013-10-03 Thu 23:02]
** DONE Try and get deamdify to work                                    :can:
   CLOSED: [2013-10-03 Thu 23:39]
   Basically can/amd is fucked.
** DONE Host canjs fork                                                 :can:
   CLOSED: [2013-10-04 Fri 19:33]
** DONE pushState/history support for pages                    :pages:server:
   CLOSED: [2013-10-04 Fri 21:40]
** DONE License as AGPL                                               :legal:
   CLOSED: [2013-10-04 Fri 22:03]
** DONE query/response system for sockets                           :sockets:
   CLOSED: [2013-10-04 Fri 22:54]
   Add a system for attaching responses to client-side requests (and
   vice-versa!), like socket.io supports.
** DONE Use Q in the frontend instead of $.deferred                  :client:
   CLOSED: [2013-10-04 Fri 23:15]
** DONE Use assert properly D:                                        :tests:
   CLOSED: [2013-10-04 Fri 23:17]
   I've been putting the actual/expecteds in the wrong place. :\
** DONE broadcast support for socketServer                     :socketServer:
   CLOSED: [2013-10-04 Fri 23:20]
** DONE Set up a basic test with testee                     :qa:architecture:
   CLOSED: [2013-10-17 Thu 22:43]
   Just something that tests that connections are established properly and the
   like. This might become very important to have, very soon.
** DONE Improve socketConn API                                      :sockets:
   CLOSED: [2013-10-21 Mon 21:08]
   Need to hide the whole auth thing. As soon as connect() is called, users
   should be able to pretend they can write to it, even if the first messages
   before auth are buffered.
** DONE What happened to source maps?                                 :build:
   CLOSED: [2013-10-21 Mon 21:09]
   Did something get fucked? I thought I was generating source maps, but a
   recent debugging session seems to imply that's not the case.
   UPDATE: I bet it's just a chrome/canary bug. Seems to be ok.
** DONE Hook up chatlog to new socketConn API                  :chat:sockets:
   CLOSED: [2013-10-21 Mon 23:02]
   Nothing really needed doing
** DONE Tests for chatlog                                             :tests:
   CLOSED: [2013-10-21 Mon 23:21]
   Get existing ones to work and fill out some of the empties
** DONE Upgrade to Can 2.0                                               :ui:
   CLOSED: [2013-10-25 Fri 00:15]
   This may also mean I don't need the hack for can.route anymore.
** DONE Switch controls to can.component                         :components:
   CLOSED: [2013-10-31 Thu 23:30]
   can.Component seems actually pretty neat. It might be good to replace
   controls/ with components/

   This will also take care of style scoping -- to the tag for the component.
** DONE Server-side user account support                       :users:server:
   CLOSED: [2013-11-01 Fri 22:22]
   Need database support for accounts with secure password hashing (just
   use postgres' support for this), a service (over websockets!) to manage
   them, and controls for creating and managing user accounts on the
   client-side.
   Look at https://github.com/chriso/node-validator for validation!
** DONE Figure out why make is always triggering npm install          :build:
   CLOSED: [2013-11-01 Fri 22:26]
   It was depending on deps, so duh.
** DONE Figure out why inserted event isn't firing                      :bug:
   CLOSED: [2013-11-01 Fri 22:38]
   can2.0 doesn't support jquery2.0
** DONE Patch can2.0 so it fires the inserted event on jq2.0         :bugfix:
   CLOSED: [2013-11-02 Sat 00:00]
   Do a monkey patch and submit a pull request. Take monkey patch out when
   bower-can updates.
** DONE can.Component-ify pages/router                                :pages:
   CLOSED: [2013-11-02 Sat 23:31]
** DONE can.component-ify entryGroup renderers                           :ui:
   CLOSED: [2013-11-03 Sun 13:24]
** DONE Consistify template/style names                                  :ui:
   CLOSED: [2013-11-03 Sun 16:18]
   componentName/{index.js,template.mustache,stylus.styl}
** DONE Stop requiring clone in order to use Chatlog                     :ui:
   CLOSED: [2013-11-04 Mon 22:13]
   Just export something from models/chatlog
** DONE chat page                                                 :chat:page:
   CLOSED: [2013-11-05 Tue 22:02]
   Move the chat page to something other than home (mostly just rename that
   page, and make / something more homey).
** DONE Use src/*/node_modules/ directories for simpler paths          :misc:
   CLOSED: [2013-11-07 Thu 20:33]
   According to the nodejs docs, node's lookup algorithm looks in node_modules/
   for things to require, so I could move some of the utility libraries into
   those directories to avoid all the ../../../../lib/lol bullshit.
   UPDATE: I don't think it works with es6ify.
* backlog [0/23]
** TODO Login page                                                :page:auth:
** TODO Account creation page                                     :user:page:
** TODO Client-side account management                         :users:client:
** TODO Simple permissions                                       :users:auth:
   Two permission types are actually needed: public (can be accessed by any
   connections), and user, which is for logged-in site users. No need to worry
   about admin stuff for now.
** TODO session management for sockets                :sockets:sessions:auth:
   Sockets involve some special considerations when it comes to sessions. The
   client should not try to auto-reconnect, for example, if a socket was closed
   due to an expired session. Likewise, socket connections must be shut down
   immediately if a session is removed/canceled/expired. Think through what
   this involves and work on an implementation.
** TODO Tests for customElement                                       :tests:
   Most of these can probably wait, but it might help expose why the inserted
   event isn't firing.
** TODO Remove the domManip monkey patch                             :bugfix:
   as soon as it's accepted by upstream. I'd rather not keep my own build of
   canjs again.
   UPDATE: The patch got accepted upstream. Just need to wait for a new
   release, and it's done.
** TODO Treat chatInput more like a tabs component                       :ui:
** TODO Figure out node_modules inside src/client/js                   :misc:
   It didn't seem to be converting stuff.
** TODO Progressive enhancements                                         :ui:
   Not all pages need to have full-fledged javascript. Some might even be able
   to get away without using javascript at all (such as most static pages). It
   would be nice to implement a system that progressively enhances pages up to
   the capabilities of modern browsers. This could even start off as just
   noscript -> modern browsers, providing only a simple interface to
   non-evergreens. To get this to work nicely, it might be good to start off
   with the server-side page rendering protocol.
   Might want to start by getting fx to work :|
** TODO Pull in jwerty for fancy keyboard events                         :ui:
** TODO Tests for chatoutput                                          :tests:
   There's a few already, but they need to be revived after the can.component
   port.
** TODO Tests for chatinput                                           :tests:
** TODO Can OTP be implemented on top of node-fibers?                :server:
** TODO Error report messages                                        :parser:
   If the parser fails, let the user know why.
** TODO Transaction support for db.js                                    :db:
** TODO Observable connection state                              :socketConn:
   Instead of forcing everything to attach to on* events, let them simply
   observe some kind of connectionState attribute.
** TODO Style chatInput                                          :chat:style:
   Is there a way to reuse the styles in chatOutput somehow? They're
   obviously at least partly specific to output, but the various entry
   types are supposed to look somewhat similar.
** TODO server-side rendering protocol for pages               :pages:server:
   Now that we have pushstate stuff, it should be possible (and not too hard) to
   figure out a protocol for src/client/js/pages where any pages there can
   optionally have some file or set of files, or a folder, that the server can
   look at to determine whether it can render a direct http request to that
   page.
** TODO Improve socketServer messaging                               :server:
   Probably improve the client-side API, too. How should messages be broadcast?
   Filtered? Should raw clients be provided? Is access to the socketServer
   itself necessary? (probably).
** TODO Basic character creation and management                  :characters:
   Need database support for characters, a service (over websockets?) to
   manage them, and a control on the client-side for management.
** TODO Move proto into a shared lib                                  :proto:
   This is in process.
** TODO Get testee to work with SockJS                                :tests:
   Not sure why it isn't working. phantomjs can run the test file just fine.
* active [3/24]
  The Road to Playtesting
  
  This "sprint" will be all about having a good-enough thing that can be simply
  playtested. It needs to be just enough that people can visit the site (no
  login necessary), create a simple character (globally shared -- no access
  controls, they're just puppets that can be used by several people at a time),
  and interact with others as that character. It should also support the
  ability to add non-actor entries, such as slug lines and scene headers.

  Finally, try and gussy it up a bit so that people aren't distracted by the
  "game" being a plain white screen with some text on it and an <hr>. It should
  also not feel terribly broken, so basic functionality like evergreen browser
  support and routing should work as expected.
** DONE Character support in DB                                          :db:
   CLOSED: [2013-11-08 Fri 22:41]
   Basic storage for characters -- they need to have names and a freeform
   description. (fancier stuff to come later -- resist the temptation!)
** DONE Globalise socketConn                                             :ui:
   CLOSED: [2013-11-12 Tue 16:51]
   Much like the db module does all the db connection management stuff, make
   socketConn a singleton off its module. This is ok because we should only
   ever have a single socketConn open (this is a restriction of SockJS, and
   really a perfectly fine restriction to have, I think). Passing the
   socketConn reference around through all the models, having to instantiate
   them with conns and all that, is actually kind of a pain in the ass.
   
   The whole genfun thing is also a bit of a pain in the ass. Not sure if
   want. Maybe it would be nicer if it still had the #addMethod interface. Also
   if it actually supported primitives in some way...
** DONE Call/request protocol for socketConn                         :server:
   CLOSED: [2013-11-13 Wed 18:23]
   Emulate gen_server:call to simplify the socketConn API a bit. Just be
   consistent about it.
** TODO Character management service                                 :server:
** TODO Character creation page                                          :ui:
   A page where people can go and create or edit a character's name and
   description. The changes are saved immediately. Should include a list of
   characters that can be selected and edited, charaacter deletion, validation,
   and error reporting when saving a character fails.
** TODO Character deletion                                               :ui:
** TODO Character selection component                                    :ui:
   A component that lets a user pick the current character they're playing
   as. Should list all available characters and set the user's state to use it.
   This should be used in the chat page, and may not actually need to be an
   explicit component.
** TODO Entry removal support                                            :ui:
   Players should be able to remove something they've entered. No need for an
   actual voting system. It just needs to be removable, and others should see
   that removal in their own chats.
** TODO Fix the double-history issue again                               :ui:
   this pushstate thing is nuts. What the fuck is going on?
** TODO Get it to work on firefox :(                                     :ui:
   Looks like can.route.pushState is fucked on firefox?...
** TODO Test it on Safari                                                :ui:
** TODO Reconnect logic for socketConn                           :socketConn:
   On disconnect, try to reconnect (in the background) by polling for a
   certain amount of time. Emit a 'reconnecting' event of some sort in the
   meantime. If the timeout passes, cancel the reconnection attempt and
   emit the disconnected event.
   This'll be necessary for the playtest so I can make code changes on the fly
   without forcing all the playtesters to refresh.
** TODO Clickable character names in chatOutput                          :ui:
   If you click the name of a character in chatOutput, it should somehow show
   something that displays the name and description of the character somewhere
   in the UI.
** TODO slug line and scene header support for chatInput                 :ui:
** TODO Gussy up chatInput                                               :ui:
   It's kinda crappy and minimal right now. Play around with how it
   looks/feels. Also get rid of the character name stuff because that'll be
   taken care of by something else.
** TODO Base ui template                                                 :ui:
   Come up with a base template for the site that will wrap all pages.
** TODO Gussy up /play page                                              :ui:
   Now that there's a base template, make the play page a little nicer. At
   least get rid of the damn <hr>
** TODO Come up with basic playtest rules                              :game:
   The application should be a good enough prototype that people can visit it
   and participate in a controlled playtest. Come up with some rules that should
   be tested, write them out, try them out by yourself or with one other person.
** TODO Write up a basic backstory for the world                   :building:
** TODO Write some basic plot guidelines or players                :building:
   Like running a campaign -- just give them a general idea of something they
   can interact with so they don't start from zero. Doesn't have to be very
   original.
** TODO Write two or three sets                                    :building:
   Write a few sets you can dump descriptions for (no need for a sets system to
   be in place -- just need to be able to do slug lines). Do this after the
   basic pseudo-plot is planned out.
** TODO Find some players                                              :game:
** TODO Run a quick playtest alone/with one person                     :game:
** TODO Write up a playtester questionnaire                            :game:
